# -*- coding: utf-8 -*-
"""Tumour classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/127Z-3HIxgINTJSxIuLnrvClfJoCuBZAU
"""

# Tumor Classification: Malignant vs Benign

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score

# ------------------------------
# STEP 1: Load Dataset
# ------------------------------
data = load_breast_cancer()
X = data.data
y = data.target  # 0 = malignant, 1 = benign

# Convert to DataFrame for clarity
df = pd.DataFrame(X, columns=data.feature_names)
df['target'] = y

# ------------------------------
# STEP 2: Train-Test Split
# ------------------------------
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ------------------------------
# STEP 3: Normalize Features
# ------------------------------
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ------------------------------
# STEP 4: Train Random Forest Classifier
# ------------------------------
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train_scaled, y_train)

# ------------------------------
# STEP 5: Make Predictions
# ------------------------------
y_pred = rf_model.predict(X_test_scaled)

# ------------------------------
# STEP 6: Evaluate Model
# ------------------------------
accuracy = accuracy_score(y_test, y_pred)
print(f"\nModel Accuracy: {accuracy:.4f}")

print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=data.target_names))

print("\nConfusion Matrix:")
cm = confusion_matrix(y_test, y_pred)
print(cm)

# ------------------------------
# STEP 7: Visualization
# ------------------------------
plt.figure(figsize=(5,5))
plt.imshow(cm, cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.colorbar()
plt.xticks([0,1], data.target_names)
plt.yticks([0,1], data.target_names)
plt.xlabel("Predicted")
plt.ylabel("Actual")

# Annotate numbers in the confusion matrix
for i in range(2):
    for j in range(2):
        plt.text(j, i, cm[i,j], ha='center', va='center', color='red', fontsize=16)
plt.show()