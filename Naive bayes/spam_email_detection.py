# -*- coding: utf-8 -*-
"""SPAM EMAIL DETECTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SWQqgG93cv6mUeS40oqnm2qQgBVpXPZ3
"""

# SPAM EMAIL DETECTION USING NAIVE BAYES

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, confusion_matrix


# STEP 2: Load Dataset
df = pd.read_csv('spam.csv', encoding='latin-1')
df = df[['v1', 'v2']]
df.columns = ['label', 'text']

# Encode labels: 'ham' -> 0, 'spam' -> 1
df['label_num'] = df.label.map({'ham':0, 'spam':1})


# STEP 3: Feature Extraction

vectorizer = CountVectorizer(stop_words='english')
X = vectorizer.fit_transform(df['text'])
y = df['label_num']

# STEP 4: Train/Test Split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42
)

# STEP 5: Train Naive Bayes Model

model = MultinomialNB()
model.fit(X_train, y_train)

# STEP 6: Evaluate Model

y_pred = model.predict(X_test)
print('Confusion Matrix:\n', confusion_matrix(y_test, y_pred))
print('\nClassification Report:\n', classification_report(y_test, y_pred))

# STEP 7: Predict New Messages

new_messages = [
    "Congratulations! You have won a free iPhone. Click here to claim.",
    "Hey, are we meeting for lunch today?",
    "You have been selected for a cash prize! Claim now.",
    "Reminder: Your appointment is scheduled for tomorrow at 10am."
]

# Transform new messages using the same vectorizer
X_new = vectorizer.transform(new_messages)
predictions = model.predict(X_new)
pred_probs = model.predict_proba(X_new)

# Display predictions
print("\n--- New Messages Predictions ---")
for msg, pred, prob in zip(new_messages, predictions, pred_probs):
    label = 'spam' if pred == 1 else 'ham'
    print(f"\nMESSAGE: {msg}")
    print(f"Prediction: {label}, Probabilities -> Ham: {prob[0]:.4f}, Spam: {prob[1]:.4f}")