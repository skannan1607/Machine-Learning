# -*- coding: utf-8 -*-
"""House price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W98ablo38OlTzrubc1Djxh2z4l_OdG2p
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

# Sample dataset
# Expanded dataset
data = {
    'size': [1500, 1800, 2400, 3000, 3500, 2000, 2200, 2800, 3200, 4000],
    'bedrooms': [3, 4, 3, 5, 4, 3, 4, 4, 5, 5],
    'price': [400000, 500000, 600000, 650000, 700000, 450000, 520000, 610000, 680000, 750000]
}

df = pd.DataFrame(data)
print(df)

# Simple Linear Regression: Price vs Size
X_simple = df[['size']]
y = df['price']
X_train, X_test, y_train, y_test = train_test_split(X_simple, y, test_size=0.2, random_state=42)
model_simple = LinearRegression()
model_simple.fit(X_train, y_train)
y_pred_simple = model_simple.predict(X_test)

print("Simple Linear Regression:")
print("Coefficients:", model_simple.coef_)
print("Intercept:", model_simple.intercept_)
print("R2 score:", r2_score(y_test, y_pred_simple))

# Scatter plot
plt.figure(figsize=(8,5))
plt.scatter(data['size'], data['price'], color='blue', label='Data Points')

# Fit line
coefficients = np.polyfit(data['size'], data['price'], 1)  # Linear fit
poly = np.poly1d(coefficients)
plt.plot(data['size'], poly(data['size']), color='red', label='Fit Line')

# Labels
plt.title('House Size vs Price with Fit Line')
plt.xlabel('Size (sq ft)')
plt.ylabel('Price ($)')
plt.legend()
plt.grid(True)
plt.show()

# Multiple Linear Regression: Price vs Size and Bedrooms
X_multiple = df[['size', 'bedrooms']]
X_train_m, X_test_m, y_train_m, y_test_m = train_test_split(X_multiple, y, test_size=0.2, random_state=42)
model_multiple = LinearRegression()
model_multiple.fit(X_train_m, y_train_m)
y_pred_multiple = model_multiple.predict(X_test_m)

print("\nMultiple Linear Regression:")
print("Coefficients:", model_multiple.coef_)
print("Intercept:", model_multiple.intercept_)
print("R2 score:", r2_score(y_test_m, y_pred_multiple))